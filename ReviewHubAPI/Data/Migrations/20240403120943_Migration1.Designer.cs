// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReviewHubAPI.Data;

#nullable disable

namespace ReviewHubAPI.Data.Migrations
{
    [DbContext(typeof(ReviewHubDbContext))]
    [Migration("20240403120943_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ReviewEntityId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserEntityUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewEntityId");

                    b.HasIndex("UserEntityUserID");

                    b.ToTable("Coments");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.MovieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.MoviePosterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieEntityId")
                        .HasColumnType("int");

                    b.Property<byte[]>("MoviePoster")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("MovieEntityId")
                        .IsUnique();

                    b.ToTable("MoviePoster");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.ProfilePictureEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("longblob");

                    b.Property<int?>("UserEntityUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityUserID");

                    b.ToTable("ProfilePicture");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MovieEntityId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.ReviewPictureEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ReviewPicture")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.ToTable("ReviewPicture");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.UserEntity", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = -1,
                            DateCreated = new DateTime(2024, 4, 3, 12, 9, 42, 993, DateTimeKind.Utc).AddTicks(5858),
                            Email = "admin@proton.me",
                            Firstname = "Admin",
                            IsAdmin = true,
                            Lastname = "User",
                            PasswordHash = "$2a$11$xcNu80R0G2Qg62bPgrCs3eMYKPdHDwY1UZt8MxYKlGANEP6H7aSpy",
                            Username = "TheOne"
                        });
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.CommentEntity", b =>
                {
                    b.HasOne("ReviewHubAPI.Models.Entity.ReviewEntity", "ReviewEntity")
                        .WithMany("CommentEntities")
                        .HasForeignKey("ReviewEntityId");

                    b.HasOne("ReviewHubAPI.Models.Entity.UserEntity", "UserEntity")
                        .WithMany("comments")
                        .HasForeignKey("UserEntityUserID");

                    b.Navigation("ReviewEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.MoviePosterEntity", b =>
                {
                    b.HasOne("ReviewHubAPI.Models.Entity.MovieEntity", "MovieEntity")
                        .WithOne("MoviePosterEntity")
                        .HasForeignKey("ReviewHubAPI.Models.Entity.MoviePosterEntity", "MovieEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieEntity");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.ProfilePictureEntity", b =>
                {
                    b.HasOne("ReviewHubAPI.Models.Entity.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityUserID");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.ReviewEntity", b =>
                {
                    b.HasOne("ReviewHubAPI.Models.Entity.MovieEntity", null)
                        .WithMany("ReviewEntities")
                        .HasForeignKey("MovieEntityId");

                    b.HasOne("ReviewHubAPI.Models.Entity.UserEntity", "UserEntity")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.ReviewPictureEntity", b =>
                {
                    b.HasOne("ReviewHubAPI.Models.Entity.ReviewEntity", "ReviewEntity")
                        .WithOne("ReviewPictureEntity")
                        .HasForeignKey("ReviewHubAPI.Models.Entity.ReviewPictureEntity", "ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewEntity");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.MovieEntity", b =>
                {
                    b.Navigation("MoviePosterEntity");

                    b.Navigation("ReviewEntities");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.ReviewEntity", b =>
                {
                    b.Navigation("CommentEntities");

                    b.Navigation("ReviewPictureEntity");
                });

            modelBuilder.Entity("ReviewHubAPI.Models.Entity.UserEntity", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("comments");
                });
#pragma warning restore 612, 618
        }
    }
}
